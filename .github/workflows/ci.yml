name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'
        cache-dependency-path: frontend/pnpm-lock.yaml
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Type check
      run: pnpm typecheck
    
    - name: Run tests
      run: pnpm test --passWithNoTests
    
    - name: Build
      run: pnpm build

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        TESTING: true
      run: |
        python -m pytest app/tests/ -v --tb=short
    
    - name: Check code formatting
      run: |
        python -m black --check app/
    
    - name: Lint code
      run: |
        python -m flake8 app/ --max-line-length=88 --extend-ignore=E203,W503

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'
        cache-dependency-path: frontend/pnpm-lock.yaml
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: pnpm install --frozen-lockfile
    
    - name: Run database migrations
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
      run: |
        alembic upgrade head
    
    - name: Start backend server
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        TESTING: true
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Build frontend
      working-directory: ./frontend
      env:
        NEXT_PUBLIC_API_BASE_URL: http://localhost:8000
      run: pnpm build
    
    - name: Run integration tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        API_BASE_URL: http://localhost:8000
      run: |
        python -m pytest app/tests/integration/ -v --tb=short || echo "Integration tests not yet implemented"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
